/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: gabstock (https://sketchfab.com/gabstock)
License: SKETCHFAB Editorial (https://sketchfab.com/licenses)
Source: https://sketchfab.com/3d-models/nes-nintendo-be655ca06bfb4ab48bffccccd33e3733
Title: NES nintendo
*/

import * as THREE from "three";
import { useGLTF } from "@react-three/drei";
import { GLTF } from "three-stdlib";
import { useStore } from "@/utils/store";

type GLTFResult = GLTF & {
  nodes: {
    Object_4: THREE.Mesh;
    Object_5: THREE.Mesh;
    Object_6: THREE.Mesh;
    Object_7: THREE.Mesh;
    Object_8: THREE.Mesh;
    Object_9: THREE.Mesh;
    Object_10: THREE.Mesh;
    Object_11: THREE.Mesh;
    Object_12: THREE.Mesh;
    Object_13: THREE.Mesh;
    Object_14: THREE.Mesh;
  };
  materials: {
    ["Material.001"]: THREE.MeshStandardMaterial;
    ["Material.002"]: THREE.MeshStandardMaterial;
    ["Material.003"]: THREE.MeshStandardMaterial;
    ["Material.004"]: THREE.MeshStandardMaterial;
    ["Material.005"]: THREE.MeshStandardMaterial;
    ["Material.007"]: THREE.MeshStandardMaterial;
    ["Material.008"]: THREE.MeshStandardMaterial;
    ["Material.009"]: THREE.MeshStandardMaterial;
    ["Material.010"]: THREE.MeshStandardMaterial;
    ["Material.011"]: THREE.MeshStandardMaterial;
    logo: THREE.MeshStandardMaterial;
  };
};

const createMaterial = (color: string, finish: string) => {
  let roughness=0, metalness=0;

  switch (finish) {
    case 'matte':
      roughness = 0.45;
      metalness = 0;
      break;
    case 'polished':
      roughness = 0.10;
      metalness = 0;
      break;
    case 'metallic':
      roughness = 0.23;
      metalness = 1;
      break;
  }
  
  return new THREE.MeshStandardMaterial({
    color: color, 
    roughness: roughness, 
    metalness: metalness
  })
}

export default function NES(props: JSX.IntrinsicElements["group"]) {
  // Load model
  const { nodes, materials } = useGLTF("/NES.glb") as GLTFResult;

  // Get color states
  const topCoverColor = useStore((state) => state.topCoverColor)
  const bottomCoverColor = useStore((state) => state.bottomCoverColor)
  const controlBarColor = useStore((state) => state.controlBarColor)
  const letteringColor = useStore((state) => state.letteringColor)

  // Set elements colors
  const topCoverMaterial = createMaterial(topCoverColor.code, topCoverColor.finish)
  const bottomCoverMaterial = createMaterial(bottomCoverColor.code, bottomCoverColor.finish)
  const controlBarMaterial = createMaterial(controlBarColor.code, controlBarColor.finish)
  const letteringMaterial = createMaterial(letteringColor.code, letteringColor.finish)

  return (
    <group {...props} dispose={null}>
      <group position={[0, -0.2, 0]}>
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_4.geometry}
          material={controlBarMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_5.geometry}
          material={topCoverMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_6.geometry}
          material={bottomCoverMaterial}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_7.geometry}
          material={materials["Material.004"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_8.geometry}
          material={materials["Material.005"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_9.geometry}
          material={materials["Material.007"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_10.geometry}
          material={materials["Material.008"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_11.geometry}
          material={materials["Material.009"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_12.geometry}
          material={materials["Material.010"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_13.geometry}
          material={materials["Material.011"]}
        />
        <mesh
          castShadow
          receiveShadow
          geometry={nodes.Object_14.geometry}
          material={letteringMaterial}
        />
      </group>
    </group>
  );
}

useGLTF.preload("/NES.gltf");